{"version":3,"file":"SelectionPage-D9qL67qd.js","sources":["../../src/pages/SelectionPage.tsx"],"sourcesContent":["// Selection page - Participants select their preferred dinner options\n// Based on: specs/001-dinner-decider-enables/tasks.md T055\n\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getDinnerOptions } from '../services/apiClient';\nimport { submitSelection } from '../services/socketService';\nimport { useSessionStore } from '../stores/sessionStore';\nimport type { DinnerOption } from '@dinner-app/shared/types';\n\nexport default function SelectionPage() {\n  const navigate = useNavigate();\n  const { sessionCode } = useParams<{ sessionCode: string }>();\n  const { selections, toggleSelection, participants } = useSessionStore();\n  const [options, setOptions] = useState<DinnerOption[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  const [error, setError] = useState('');\n  const [submittedCount, setSubmittedCount] = useState(0);\n\n  useEffect(() => {\n    // Load dinner options\n    const loadOptions = async () => {\n      try {\n        const data = await getDinnerOptions();\n        setOptions(data);\n      } catch (err: unknown) {\n        setError(err instanceof Error ? err.message : 'Failed to load options');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadOptions();\n  }, []);\n\n  // Listen for participant submissions\n  useEffect(() => {\n    const count = participants.filter((p) => p.hasSubmitted).length;\n    setSubmittedCount(count);\n  }, [participants]);\n\n  // Navigate to results when session is complete\n  const sessionStatus = useSessionStore((state) => state.sessionStatus);\n  useEffect(() => {\n    if (sessionStatus === 'complete') {\n      navigate(`/session/${sessionCode}/results`);\n    }\n  }, [sessionStatus, sessionCode, navigate]);\n\n  const handleSubmit = async () => {\n    if (selections.length === 0) {\n      setError('Please select at least one option');\n      return;\n    }\n\n    if (!sessionCode) {\n      setError('Session code not found');\n      return;\n    }\n\n    setIsSubmitting(true);\n    setError('');\n\n    try {\n      await submitSelection(sessionCode, selections);\n      setHasSubmitted(true);\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to submit selections');\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"inline-block w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading options...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (hasSubmitted) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n        <div className=\"max-w-md w-full text-center\">\n          <div className=\"bg-white rounded-lg shadow-lg p-8\">\n            <div className=\"text-6xl mb-4\">âœ“</div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Selections Submitted!\n            </h2>\n            <p className=\"text-gray-600 mb-6\">\n              Waiting for other participants...\n            </p>\n\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-500\">\n                {submittedCount} of {participants.length} participants have submitted\n              </p>\n              <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n                <div\n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-500\"\n                  style={{\n                    width: `${(submittedCount / participants.length) * 100}%`,\n                  }}\n                ></div>\n              </div>\n            </div>\n\n            <p className=\"text-xs text-gray-400\">\n              Results will appear automatically when everyone submits\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 px-4 py-8\">\n      <div className=\"max-w-md mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Select Your Preferences\n          </h1>\n          <p className=\"text-gray-600\">\n            Choose all options you&apos;d be happy with\n          </p>\n          <p className=\"text-sm text-blue-600 mt-2\">\n            {selections.length} selected\n          </p>\n        </div>\n\n        {/* Error message */}\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <p className=\"text-sm text-red-600\">{error}</p>\n          </div>\n        )}\n\n        {/* Options List */}\n        <div className=\"bg-white rounded-lg shadow-lg p-4 mb-6 max-h-[60vh] overflow-y-auto\">\n          <div className=\"space-y-2\">\n            {options.map((option) => {\n              const isSelected = selections.includes(option.optionId);\n              return (\n                <button\n                  key={option.optionId}\n                  onClick={() => toggleSelection(option.optionId)}\n                  className={`w-full min-h-[44px] p-4 text-left rounded-lg border-2 transition-all active:scale-[0.98] ${\n                    isSelected\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 bg-white hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div\n                      className={`w-6 h-6 rounded border-2 flex items-center justify-center flex-shrink-0 ${\n                        isSelected\n                          ? 'border-blue-500 bg-blue-500'\n                          : 'border-gray-300'\n                      }`}\n                    >\n                      {isSelected && (\n                        <svg\n                          className=\"w-4 h-4 text-white\"\n                          fill=\"none\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                        >\n                          <path d=\"M5 13l4 4L19 7\"></path>\n                        </svg>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-gray-900\">\n                        {option.displayName}\n                      </p>\n                      {option.description && (\n                        <p className=\"text-sm text-gray-500\">\n                          {option.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Submit Button */}\n        <button\n          onClick={handleSubmit}\n          disabled={isSubmitting || selections.length === 0}\n          className=\"w-full min-h-[44px] px-6 py-3 text-lg font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed active:scale-[0.98] transition-all shadow-lg\"\n        >\n          {isSubmitting ? 'Submitting...' : `Submit ${selections.length} Selection${selections.length !== 1 ? 's' : ''}`}\n        </button>\n\n        {/* Info */}\n        <div className=\"mt-4 text-center text-sm text-gray-500\">\n          <p>ðŸ”’ Your selections are private until everyone submits</p>\n        </div>\n      </div>\n    </main>\n  );\n}"],"names":["SelectionPage","navigate","useNavigate","sessionCode","useParams","selections","toggleSelection","participants","useSessionStore","options","setOptions","useState","isLoading","setIsLoading","isSubmitting","setIsSubmitting","hasSubmitted","setHasSubmitted","error","setError","submittedCount","setSubmittedCount","useEffect","data","getDinnerOptions","err","count","p","sessionStatus","state","handleSubmit","submitSelection","jsxs","jsx","option","isSelected"],"mappings":"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"}