{"version":3,"file":"ResultsPage-CKCJBB2J.js","sources":["../../src/pages/ResultsPage.tsx"],"sourcesContent":["// Results page - Show overlapping selections and all participants' choices\n// Based on: specs/001-dinner-decider-enables/tasks.md T056\n\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { restartSession } from '../services/socketService';\nimport { useSessionStore } from '../stores/sessionStore';\nimport { useState } from 'react';\n\nexport default function ResultsPage() {\n  const navigate = useNavigate();\n  const { sessionCode } = useParams<{ sessionCode: string }>();\n  const { overlappingOptions, allSelections, participants } = useSessionStore();\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [error, setError] = useState('');\n\n  const hasOverlap = overlappingOptions.length > 0;\n\n  const handleRestart = async () => {\n    if (!sessionCode) return;\n\n    setIsRestarting(true);\n    setError('');\n\n    try {\n      await restartSession(sessionCode);\n      // Navigate back to selection page\n      navigate(`/session/${sessionCode}/select`);\n    } catch (err: any) {\n      setError(err.message || 'Failed to restart session');\n      setIsRestarting(false);\n    }\n  };\n\n  const handleNewSession = () => {\n    navigate('/');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 px-4 py-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            {hasOverlap ? 'ðŸŽ‰ Perfect Match!' : 'ðŸ˜• No Match Found'}\n          </h1>\n          <p className=\"text-gray-600\">\n            {hasOverlap\n              ? 'Everyone agrees on these options'\n              : 'No restaurants matched everyone\\'s preferences'}\n          </p>\n        </div>\n\n        {/* Overlapping Options */}\n        {hasOverlap ? (\n          <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n              Matching Restaurants\n            </h2>\n            <div className=\"space-y-3\">\n              {overlappingOptions.map((option) => (\n                <div\n                  key={option.optionId}\n                  className=\"p-4 bg-green-50 border-2 border-green-500 rounded-lg\"\n                >\n                  <p className=\"text-lg font-semibold text-gray-900\">\n                    {option.displayName}\n                  </p>\n                  {option.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {option.description}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6 text-center\">\n            <div className=\"text-6xl mb-4\">ðŸ¤·</div>\n            <p className=\"text-gray-600 mb-4\">\n              No restaurants were selected by all participants\n            </p>\n            <button\n              onClick={handleRestart}\n              disabled={isRestarting}\n              className=\"px-6 py-3 text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 active:scale-[0.98] transition-all\"\n            >\n              {isRestarting ? 'Restarting...' : 'Try Again'}\n            </button>\n          </div>\n        )}\n\n        {/* All Selections */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            Everyone's Selections\n          </h2>\n          <div className=\"space-y-4\">\n            {participants.map((participant) => {\n              const participantSelections = allSelections[participant.displayName] || [];\n              return (\n                <div key={participant.participantId} className=\"border-b pb-4 last:border-b-0\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                      {participant.displayName.charAt(0).toUpperCase()}\n                    </div>\n                    <p className=\"font-semibold text-gray-900\">\n                      {participant.displayName}\n                    </p>\n                  </div>\n                  <div className=\"ml-10\">\n                    {participantSelections.length > 0 ? (\n                      <ul className=\"text-sm text-gray-600 space-y-1\">\n                        {participantSelections.map((optionId, idx) => {\n                          const option = overlappingOptions.find((o) => o.optionId === optionId);\n                          const isMatch = overlappingOptions.some((o) => o.optionId === optionId);\n                          return (\n                            <li key={idx} className=\"flex items-center space-x-2\">\n                              {isMatch && <span className=\"text-green-500\">âœ“</span>}\n                              <span className={isMatch ? 'font-medium text-green-700' : ''}>\n                                {option?.displayName || optionId}\n                              </span>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                    ) : (\n                      <p className=\"text-sm text-gray-400 italic\">No selections</p>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Error message */}\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <p className=\"text-sm text-red-600\">{error}</p>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3\">\n          {hasOverlap && (\n            <button\n              onClick={handleRestart}\n              disabled={isRestarting}\n              className=\"w-full min-h-[44px] px-6 py-3 text-base font-medium text-blue-600 bg-white rounded-lg hover:bg-blue-50 active:scale-[0.98] transition-all border-2 border-blue-600\"\n            >\n              {isRestarting ? 'Restarting...' : 'Select Again'}\n            </button>\n          )}\n\n          <button\n            onClick={handleNewSession}\n            className=\"w-full min-h-[44px] px-6 py-3 text-base font-medium text-gray-700 bg-white rounded-lg hover:bg-gray-50 active:scale-[0.98] transition-all border-2 border-gray-300\"\n          >\n            Start New Session\n          </button>\n        </div>\n\n        {/* Session Info */}\n        <div className=\"mt-6 text-center text-sm text-gray-500\">\n          <p>Session Code: <span className=\"font-mono font-semibold\">{sessionCode}</span></p>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["ResultsPage","navigate","useNavigate","sessionCode","useParams","overlappingOptions","allSelections","participants","useSessionStore","isRestarting","setIsRestarting","useState","error","setError","hasOverlap","handleRestart","restartSession","err","handleNewSession","jsxs","jsx","option","participant","participantSelections","optionId","idx","o","isMatch"],"mappings":"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"}