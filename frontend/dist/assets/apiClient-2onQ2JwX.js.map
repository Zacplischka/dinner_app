{"version":3,"file":"apiClient-2onQ2JwX.js","sources":["../../src/services/apiClient.ts"],"sourcesContent":["// REST API client for Dinner Decider\n// Based on: specs/001-dinner-decider-enables/tasks.md T049\n\nimport type { DinnerOption } from '@dinner-app/shared/types';\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api';\n\ninterface CreateSessionResponse {\n  sessionCode: string;\n  hostName: string;\n  participantCount: number;\n  state: string;\n  expiresAt: string;\n  shareableLink: string;\n}\n\ninterface SessionResponse {\n  sessionCode: string;\n  hostName: string;\n  participantCount: number;\n  state: string;\n  expiresAt: string;\n  shareableLink: string;\n}\n\ninterface ErrorResponse {\n  error: string;\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\n/**\n * Create a new session\n */\nexport async function createSession(hostName: string): Promise<CreateSessionResponse> {\n  const response = await fetch(`${API_BASE_URL}/sessions`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ hostName }),\n  });\n\n  if (!response.ok) {\n    const error: ErrorResponse = await response.json();\n    throw new Error(error.message || 'Failed to create session');\n  }\n\n  return response.json();\n}\n\n/**\n * Get session details by code\n */\nexport async function getSession(sessionCode: string): Promise<SessionResponse> {\n  const response = await fetch(`${API_BASE_URL}/sessions/${sessionCode}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    const error: ErrorResponse = await response.json();\n    throw new Error(error.message || 'Failed to get session');\n  }\n\n  return response.json();\n}\n\n/**\n * Get list of dinner options\n */\nexport async function getDinnerOptions(): Promise<DinnerOption[]> {\n  const response = await fetch(`${API_BASE_URL}/options`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch dinner options');\n  }\n\n  const data = await response.json();\n  return data.options;\n}\n\n/**\n * Generic error handler for API calls\n */\nexport function handleApiError(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return 'An unexpected error occurred';\n}"],"names":["API_BASE_URL","createSession","hostName","response","error","getSession","sessionCode","getDinnerOptions"],"mappings":"AAKA,MAAMA,EAAe,qDA8BrB,eAAsBC,EAAcC,EAAkD,CACpF,MAAMC,EAAW,MAAM,MAAM,GAAGH,CAAY,YAAa,CACvD,OAAQ,OACR,QAAS,CACP,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CAAE,SAAAE,EAAU,CAAA,CAClC,EAED,GAAI,CAACC,EAAS,GAAI,CAChB,MAAMC,EAAuB,MAAMD,EAAS,KAAA,EAC5C,MAAM,IAAI,MAAMC,EAAM,SAAW,0BAA0B,CAC7D,CAEA,OAAOD,EAAS,KAAA,CAClB,CAKA,eAAsBE,EAAWC,EAA+C,CAC9E,MAAMH,EAAW,MAAM,MAAM,GAAGH,CAAY,aAAaM,CAAW,GAAI,CACtE,OAAQ,MACR,QAAS,CACP,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACH,EAAS,GAAI,CAChB,MAAMC,EAAuB,MAAMD,EAAS,KAAA,EAC5C,MAAM,IAAI,MAAMC,EAAM,SAAW,uBAAuB,CAC1D,CAEA,OAAOD,EAAS,KAAA,CAClB,CAKA,eAAsBI,GAA4C,CAChE,MAAMJ,EAAW,MAAM,MAAM,GAAGH,CAAY,WAAY,CACtD,OAAQ,MACR,QAAS,CACP,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACG,EAAS,GACZ,MAAM,IAAI,MAAM,gCAAgC,EAIlD,OADa,MAAMA,EAAS,KAAA,GAChB,OACd"}